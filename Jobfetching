import json
import os
from transformers import pipeline
import requests
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Load the English NLP model
nlp = spacy.load("en_core_web_sm")

# Google API details
GOOGLE_API_KEY = "AIzaSyDd2Njm34U_vU_uYOPqFjI0S_yrUOMLhyo"
CUSTOM_SEARCH_ENGINE_ID = "3741929af179a4b17"

# Initialize NER pipeline for skill extraction
skill_extractor = pipeline("ner", model="dbmdz/bert-large-cased-finetuned-conll03-english")

# Temporary JSON file for storing fetched jobs
TEMP_JOB_FILE = "fetched_jobs.json"

# Fetch jobs from Google Custom Search
def fetch_google_jobs(queries, location=""):
    all_jobs = []
    for query in queries:
        try:
            params = {
                'key': GOOGLE_API_KEY,
                'cx': CUSTOM_SEARCH_ENGINE_ID,
                'q': f"{query} {location}",
                'num': 10
            }
            response = requests.get("https://www.googleapis.com/customsearch/v1", params=params)
            response.raise_for_status()
            search_results = response.json()

            jobs = [dict(title=item.get("title", "No Title"),
                         description=item.get("snippet", "No Description"),
                         link=item.get("link", ""),
                         source="Google Search")
                    for item in search_results.get("items", [])]
            all_jobs.extend(jobs)

        except requests.RequestException as e:
            print(f"Error fetching jobs for query '{query}': {e}")

    return all_jobs

# Extract required skills from job descriptions
def extract_required_skills(description):
    try:
        entities = skill_extractor(description)
        required_skills = [entity['word'] for entity in entities if entity.get('entity_group') == "SKILL"]
        return required_skills
    except Exception as e:
        print(f"Error in skill extraction: {e}")
        return []

# Identify skill gaps
def find_skill_gaps(user_skills, job_skills):
    return list(set(job_skills) - set(user_skills.keys()))

# Fetch certification courses for missing skills
def fetch_certification_courses(missing_skills):
    courses = {}
    for skill in missing_skills:
        try:
            params = {
                'key': GOOGLE_API_KEY,
                'cx': CUSTOM_SEARCH_ENGINE_ID,
                'q': f"{skill} certification course",
                'num': 5
            }
            response = requests.get("https://www.googleapis.com/customsearch/v1", params=params)
            response.raise_for_status()
            search_results = response.json()

            courses[skill] = [dict(title=item.get("title", "No Title"),
                                   link=item.get("link", ""))
                              for item in search_results.get("items", [])]

        except requests.RequestException as e:
            print(f"Error fetching courses for skill '{skill}': {e}")
            courses[skill] = []

    return courses

# Store jobs in a JSON file
def store_jobs_in_json(jobs, file_path):
    with open(file_path, "w") as json_file:
        json.dump(jobs, json_file, indent=4)

# Load jobs from a JSON file
def load_jobs_from_json(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r") as json_file:
            return json.load(json_file)
    return []

# Main function
def main():
    try:
        # Get user input
        location = input("Enter your preferred location: ").strip()
        preferred_role = input("Enter your preferred job role: ").strip()
        user_skill_ratings = get_user_skill_ratings()

        if not user_skill_ratings:
            print("Failed to parse skills and ratings. Exiting.")
            return

        # Load existing jobs or fetch new jobs
        jobs = load_jobs_from_json(TEMP_JOB_FILE)
        if not jobs:
            queries = [preferred_role, "software engineer", "python developer", "remote jobs"]
            jobs = fetch_google_jobs(queries, location)
            store_jobs_in_json(jobs, TEMP_JOB_FILE)

        print(f"Total jobs loaded: {len(jobs)}")

        # Extract skills from job descriptions
        for job in jobs:
            job['required_skills'] = extract_required_skills(job.get("description", ""))

        # Identify skill gaps
        all_job_skills = set(skill for job in jobs for skill in job.get("required_skills", []))
        skill_gaps = find_skill_gaps(user_skill_ratings, all_job_skills)

        print("\nSkill Gaps Identified:")
        print(skill_gaps)

        # Fetch certification courses for skill gaps
        certification_courses = fetch_certification_courses(skill_gaps)

        print("\nRecommended Certification Courses:")
        for skill, courses in certification_courses.items():
            print(f"\nSkill: {skill}")
            for course in courses:
                print(f"- {course['title']} ({course['link']})")

        # Display jobs
        print("\nRecommended Jobs:")
        for job in jobs[:10]:  # Show top 10 jobs
            print(f"Title: {job.get('title')}")
            print(f"Description: {job.get('description')[:200]}...")
            print(f"Link: {job.get('link')}")
            print(f"Source: {job.get('source')}")
            print("---")

    except Exception as e:
        print(f"An error occurred: {e}")

# Get user skill ratings function
def get_user_skill_ratings():
    print("Enter your skills with ratings (format: skill:rating, e.g., python:4, java:3): ")
    skills_input = input().strip()
    skill_ratings = {}

    try:
        for item in skills_input.split(','):
            skill, rating = item.split(':')
            skill = skill.strip().lower()
            rating = int(rating.strip())
            if 1 <= rating <= 5:
                skill_ratings[skill] = rating
            else:
                print(f"Invalid rating for skill '{skill}'. Please enter a rating between 1 and 5.")
                return None
    except ValueError:
        print("Invalid input format. Use skill:rating, e.g., python:4, java:3.")
        return None

    return skill_ratings

# Run the program
if __name__ == "__main__":
    main()
